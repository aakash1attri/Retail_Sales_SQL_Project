CREATE TABLE RETAIL_SALES
(
	transactions_id	INT PRIMARY KEY,
	sale_date	DATE,
	sale_time	TIME,
	customer_id	INT,
	gender	VARCHAR(10),
	age	INT,
	category	VARCHAR(15),
	quantiy	INT,
	price_per_unit	FLOAT,
	cogs	FLOAT,
	total_sale	FLOAT
);

--DATA CLEANING

SELECT * FROM RETAIL_SALES
WHERE 
	TRANSACTIONS_ID IS NULL
	OR
	SALE_DATE IS NULL
	OR
	SALE_TIME IS NULL
	OR
	CUSTOMER_ID IS NULL
	OR
	GENDER IS NULL
	OR
	AGE IS NULL
	OR
	CATEGORY IS NULL
	OR
	QUANTIY IS NULL
	OR
	PRICE_PER_UNIT IS NULL
	OR
	COGS IS NULL
	OR
	TOTAL_SALE IS NULL

--
DELETE FROM RETAIL_SALES
WHERE 
	TRANSACTIONS_ID IS NULL
	OR
	SALE_DATE IS NULL
	OR
	SALE_TIME IS NULL
	OR
	CUSTOMER_ID IS NULL
	OR
	GENDER IS NULL
	OR
	AGE IS NULL
	OR
	CATEGORY IS NULL
	OR
	QUANTIY IS NULL
	OR
	PRICE_PER_UNIT IS NULL
	OR
	COGS IS NULL
	OR
	TOTAL_SALE IS NULL


-- DATA EXPLORATION

-- 1. HOW MANY SALES WE HAVE?
SELECT COUNT(*) AS TOTAL_SALES FROM RETAIL_SALES

-- 2. HOW MANY CUSTOMERS WE HAVE?
SELECT COUNT(DISTINCT CUSTOMER_ID) AS TOTAL_CUSTOMERS FROM RETAIL_SALES

-- 3. HOW MANY CATEGORY WE HAVE?
SELECT COUNT(DISTINCT CATEGORY) AS TOTAL_CATEGORY FROM RETAIL_SALES

-- DATA ANALYSIS

-- 1. ALL COLUMNS FRO SALES MADE ON '2022-11-05'

SELECT * FROM RETAIL_SALES
WHERE SALE_DATE = '2022-11-05';

-- 2. ALL DATA OF 'CLOTHING' AND SOLD IS MORE THAN '2' IN 'NOV 2022'

SELECT * FROM RETAIL_SALES
WHERE 
	CATEGORY = 'Clothing'
	AND
	TO_CHAR(sale_date, 'YYYY-MM') = '2022-11'
	AND QUANTIY >= '4'

-- 3. TOTAL SALE FOR EACH CATEGORY

SELECT 
	CATEGORY,
	SUM(TOTAL_SALE) AS TOTAL_SALE
FROM RETAIL_SALES
GROUP BY 1


-- 4. AVERAGE AGE OF CUSTOMER WHO PURCHASED FROM BEAUTY CATEGORY

SELECT
	ROUND(AVG(AGE), 3) AS AVG_AGE
FROM RETAIL_SALES
WHERE CATEGORY = 'Beauty'

-- 5. ALL THE TRANSACTIONS WHERE TOTAL_SALE IS > 1000

SELECT *
FROM RETAIL_SALES
WHERE TOTAL_SALE > 1000

-- 6. TOTAL TRANSACTIONS MADE BY EACH GENDER IN EACH CATEGORY

SELECT 
	CATEGORY,
	GENDER,
	COUNT(TOTAL_SALE) AS TOTAL_SALE_PER_CATEGORY
FROM RETAIL_SALES
GROUP BY 2, 1
ORDER BY 1

-- 7. AVG SALE FOR EACH MONTH. BEST SELLING MONTH IN EACH YEAR AS WELL.

SELECT YEAR_, MONTH_, TOTAL_SALE_PER_MONTH FROM
(
	SELECT
		EXTRACT(YEAR FROM SALE_DATE) AS YEAR_,
		EXTRACT(MONTH FROM SALE_DATE) AS MONTH_,
		ROUND(AVG(TOTAL_SALE)::NUMERIC, 3) AS TOTAL_SALE_PER_MONTH,
		RANK() OVER(PARTITION BY EXTRACT(YEAR FROM SALE_DATE) ORDER BY AVG(TOTAL_SALE) DESC) AS RANKS
	FROM RETAIL_SALES
	GROUP BY 1, 2
) AS T1
WHERE RANKS = 1

--- 8. TOP 5 CUSTOMER BASED ON TOTAL SALES

SELECT
	CUSTOMER_ID,
	SUM(TOTAL_SALE) AS TOTAL_S
FROM RETAIL_SALES
GROUP BY 1
ORDER BY 2 DESC
LIMIT 5

-- 9. # OF UNIQUE CUSTOMERS WHO PURCHASED ITEMS FROM EACH CATEGORY

SELECT 
	CATEGORY,
	COUNT(DISTINCT(CUSTOMER_ID)) AS UNIQUE_CUSTOMERS
FROM RETAIL_SALES
GROUP BY 1

-- 10. CREATE 3 SHIFTS (MORNING<12, 12<AFTERNOON<17,17<EVENING) AND NUMBER OF ORDERS IN THEM


WITH HOURLY_SALE AS (
SELECT *,
	CASE
		WHEN EXTRACT(HOUR FROM SALE_TIME) < 12 THEN 'MORNING'
		WHEN EXTRACT(HOUR FROM SALE_TIME) BETWEEN 12 AND 17 THEN 'AFTERNOON'
		ELSE 'EVENING'
	END AS SHIFT
FROM RETAIL_SALES)

SELECT 
	SHIFT,
	COUNT(*) AS SHIFT_COUNT
FROM HOURLY_SALE
GROUP BY 1

-- END OF PROJECT